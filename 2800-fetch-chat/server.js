let express = require("express") // 1
let app = express() // 1
let cookieParser = require('cookie-parser') // 1
let multer = require("multer") // 3
let upload = multer() // 3
app.use(cookieParser()) // 1
let passwordsAssoc = {} // 4
let sessions = {} // 4
let messages = [] // 14
app.use('/static', express.static(__dirname + '/public')) // 2
app.get("/", (req, res) => { // 2
  res.sendFile(__dirname + "/public/index.html") // 2
}) // 2
app.post("/messages", upload.none(), (req, res) => { // 17
  console.log('POST messages body', req.body) // 17
  let newMessage = { // 18
    user: sessions[req.cookies["sid"]], // 19
    msg: req.body.message // 18
  } // 18
  messages.push(newMessage) // 18
  res.sendFile(__dirname + '/public/chat.html') // 18

}) // 17
app.get("/messages", (req, res) => { // 20
  console.log('Sending back the messages') // 20
  res.send(JSON.stringify(messages)) // 21
}) // 20
app.post("/signup", upload.none(), (req, res) => { // 5
  let username = req.body.username // 6
  let password = req.body.password // 6
  passwordsAssoc[username] = password // 7
  res.send("<html><body> signup successful </body></html>") // 8
}) // 5
app.post("/login", upload.none(), (req, res) => { // 9
  let username = req.body.username // 10
  let passwordGiven = req.body.password // 10
  let expectedPassword = passwordsAssoc[username] // 11
  if (expectedPassword !== passwordGiven) { // 12
    res.send("<html><body> invalid username or password </body></html>") // 12
    return // 12
  } // 12
  let sid = Math.floor(Math.random() * 10000000) // 13
  sessions[sid] = username // 14
  res.cookie('sid', sid) // 15
  res.sendFile(__dirname + '/public/chat.html') // 16
}) // 9
app.listen(4000) // 1

/* meta
({
  text: {
    1: `We'll be using express to create our HTTP server. The cookie parser
library will be used to set and retrieve cookies.`,
    2: `Similar to the previous workshop, we instruct our HTTP server to respond to the / endpoint by
    sending back the index.html file in the public folder. You can refer back
    to the previous workshop to get more information about this. We'll be running our server on port 4000`,
    3: `We will be using the multer library in this project. Multer is a library that lets you
    process HTTP requests that result from a form submission. `,
    4: `We're creating a new object and the variable passwordsAssoc will contain a reference to it.
    The properties of this object will be the usernames and the values are going to be the passwords.
    Since the properties are not known until users sign up, we will be using object bracket notation to update this object, so make sure you're familiar with
    object bracket notation before continuing.

 Furthermore, we are creating a variable called sessions that refers to an object that
 will contain information related to sessions. The property names of this object
 is going to be session ids and the value of each property is going to be a username.`,
    5: `The /signup endpoint will process the HTTP request generated by the signup form in our index.html file.`,
    6: `As a convenience, I declared two variables: username and password. This step is not necessary, but it helps to make
    the code more readable`,
    7: `passwordsAssoc refers to an object. I update the object using objet bracket notation. For example, if the
    user had supplied the username 'bob' and the password 'pwd123' then the object would be {bob: 'pwd123'} assuming it was
    empty before.`,
    8: `The positive response to the form submission is sent back to the user. This will be displayed
    to the user when they submit the form`,
    9: `There are two forms on the index.html file, so we need two endpoints, one for each form.`,
    "10": `Again, for convenience and readibility, I define two variables`,
    "11": `The /login endpoint uses the passwordsAssoc object
    differently than the /signup endpoint. Whereas the /signup endpoint
    updates our passwordsAssoc object,
    the /login endpoint retrieves information from it. Namely, the password
    associated with the username. For example, if the user had supplied
    a username of 'sue' and the passwordsAssoc object
    was {sue: 'pass'}, then passwordsAssoc[username] would be 'pass'`,
    "12": `If the password that was given in the form does not match the password that we had stored in our passwordsAssoc
    object, then respond with a message telling the user so.`,
    13: `By this line we know that the
    user has given us a correct username and password (why?).  We randomly generate a new session id. This id will be transmitted
    by the user in the all the HTTP requests sent by the browser through the power
    of cookies. `,
    14: `We associate the session id with a username. In the future, we'll be able
    to associate an HTTP request with a username.`,
    15: `This is where we set the cookie. This line adds a set-cookie header to the HTTP request  `,
    16: `We send back the chat.html file to the user. It contains the user interface
    to allow the user to send messages.`,
    17: `This endpoint can receive a message from the user. As we will see, it will store that message in an array referred
    to by a global variable. The console.log is for debugging purposes.`,
    18: `We create a new object that contains the message from the user. This information is located in the request
    body. This request body was generated by a form submission (which form?). We create a variable
    to refer to this new object. Finally, we add this object to the messages array.`,
    19: `We also need to keep track of who sent the message. We can get this information by looking at the
    cookie sid cookie. (which endpoint set the cookie?) `,
    20: `This endpoint sends back all the messages that have been sent by users. The console log
    is for debugging purposes. `,
    21: `messages is a variable that refers to an array. The elements
    of the array are all the messages that have been received from users.
     We first have to encode
    the array as a string (how do we do this?) before we send it back to the user (why do we need to do this?)   `,


  }
})
*/